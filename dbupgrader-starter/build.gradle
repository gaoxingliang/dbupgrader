buildscript {
    repositories {
        println "aliyun repositories  from init.gradle"
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }

    allprojects {
        println "aliyun allprojects ${project.name}  from init.gradle"
        repositories {
            maven { url 'https://maven.aliyun.com/repository/google' }
            maven { url 'https://maven.aliyun.com/repository/central' }
            maven { url 'https://maven.aliyun.com/repository/public' }
        }
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jreleaser' version '1.13.1'
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

apply plugin: 'maven-publish'

group 'io.gitee.gaoxingliang:dbupgrader-starter'
version '0.0.6'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', '../src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', '../src/main/resources']
        }
    }
}

dependencies {
    implementation group: 'com.google.guava', name: 'guava', version: '33.4.0-jre'
    implementation group: 'commons-io', name: 'commons-io', version: '2.18.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'
    implementation 'com.github.jsqlparser:jsqlparser:4.9'
    compileOnly 'org.springframework.boot:spring-boot-starter:2.7.18'
    compileOnly 'org.springframework.boot:spring-boot-starter-jdbc:2.7.18'
    compileOnly 'org.springframework.boot:spring-boot-configuration-processor:2.7.18'
    compileOnly 'org.springframework.boot:spring-boot-autoconfigure:2.7.18'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}


java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId =  "io.gitee.gaoxingliang"
            artifactId = 'dbupgrader-starter'

            from components.java

            pom {
                name = 'dbupgrader-starter'
                description = 'A springboot starter for dbupgrader'
                url = 'https://github.com/gaoxingliang/dbupgrader'
                inceptionYear = '2024'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://spdx.org/licenses/Apache-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'gaoxingliang'
                        name = 'gaoxingliang'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/gaoxingliang/dbupgrader.git'
                    developerConnection = 'scm:git:ssh://github.com/gaoxingliang/dbupgrader.git'
                    url = 'https://github.com/gaoxingliang/dbupgrader'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'maven'
            url = layout.projectDirectory.dir('build/staging-deploy')
        }

        maven {
            name = 'sc'
            url = project.findProperty('SICHUANCREDIT_URL')
            credentials {
                username = project.findProperty('SICHUANCREDIT_USERNAME')
                password = project.findProperty('SICHUANCREDIT_PASSWORD')
            }
        }
    }
}

// Configure publish task to only handle maven publication
tasks.named('publish') {
    dependsOn tasks.withType(PublishToMavenRepository).matching { task ->
        task.publication.name == 'maven' && task.repository.name == 'maven'
    }
}

task publishToCentral {
    dependsOn tasks.withType(PublishToMavenRepository).matching { task ->
        task.publication.name == 'maven' && task.repository.name == 'maven'
    }
}

// Custom task for SC publication
task publishToSc {
    dependsOn tasks.withType(PublishToMavenRepository).matching { task ->
        task.publication.name == 'sc' && task.repository.name == 'sc'
    }
}

jreleaser {
    gitRootSearch = true
    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'FILE'
        publicKey = '/Users/edward/.jreleaser/public.pgp'
        secretKey = '/Users/edward/.jreleaser/private.pgp'
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}